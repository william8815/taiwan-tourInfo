{"version":3,"file":"js/381.ce480ad8.js","mappings":"kIACA,QACEA,aAAY,KAAEC,EAAF,OAAQC,EAAR,OAAgBC,EAAhB,QAAwBC,EAAxB,IAAiCC,EAAjC,KAAsCC,IAChD,OAAOC,EAAAA,EAAAA,IACJ,aAAYN,KAAQC,IAASC,IAASC,IAAUC,IAAMC,kBAE1D,EACDE,gBAAe,OAAEL,EAAF,IAAUE,EAAV,KAAeC,IAC5B,OAAOC,EAAAA,EAAAA,IAAe,aAAYJ,IAASE,IAAMC,kBAClD,E,qGCRIG,MAAM,a,uCAUmCA,MAAM,e,wBAQxCA,MAAM,8CACNC,KAAK,U,GAELC,EAAAA,EAAAA,GAA+C,QAAzCF,MAAM,mBAAkB,cAAU,G,GAAxCG,G,gIArBZC,EAAAA,EAAAA,IA4BM,MA5BN,EA4BM,EA3BJC,EAAAA,EAAAA,IAAYC,IACZD,EAAAA,EAAAA,IAGaE,EAAAA,GAAA,CAHDC,KAAK,SAAO,C,kBACtB,IAAiC,CAAtBC,EAAAA,iBAAAA,EAAAA,EAAAA,OAAXL,EAAAA,EAAAA,IAAiC,MAAAM,MAAjC,WACAC,EAAAA,EAAAA,IAA2CC,EAAA,C,MAAxBC,MAAOJ,EAAAA,eAA1B,sB,OAEFJ,EAAAA,EAAAA,IAqBaE,EAAAA,GAAA,CArBDC,KAAK,YAAU,C,kBACzB,IAA4B,CAAjBC,EAAAA,YAAAA,EAAAA,EAAAA,OAAXL,EAAAA,EAAAA,IAA4B,MAAAU,MAA5B,WACAV,EAAAA,EAAAA,IAkBM,MAAAW,EAAA,EAjBJV,EAAAA,EAAAA,IAAqCW,EAAA,CAA1BC,SAAUR,EAAAA,cAAY,qBACtBA,EAAAA,aAAaS,SAAWT,EAAAA,MAAAA,EAAAA,EAAAA,OAAnCL,EAAAA,EAAAA,IAeM,MAfN,EAeM,EAdJF,EAAAA,EAAAA,GAaS,UAZNiB,QAAK,oBAAEV,EAAAA,UAAAA,EAAAA,YAAAA,IACRT,MAAM,0BACLoB,SAAUX,EAAAA,WAHb,CAMUA,EAAAA,eAAAA,EAAAA,EAAAA,OADRL,EAAAA,EAAAA,IAMM,MANN,EAMMiB,MANN,WAOAjB,EAAAA,EAAAA,IAAwB,OAAAkB,EAAX,UAZf,SADF,qB,iFA6BR,GACEC,WAAY,CACVC,SADU,IAEVC,UAFU,IAGVC,SAAQA,EAAAA,GAEVC,QACE,MAAM9B,GAAO+B,EAAAA,EAAAA,IAAI,GACXhC,GAAMgC,EAAAA,EAAAA,IAAI,IACVC,GAAaD,EAAAA,EAAAA,IAAI,IACjBE,GAAWF,EAAAA,EAAAA,IAAI,IACfG,GAAeH,EAAAA,EAAAA,IAAI,IACnBI,GAAgBJ,EAAAA,EAAAA,IAAI,IACpBK,GAAeC,EAAAA,EAAAA,IAAS,IACxBC,GAAYP,EAAAA,EAAAA,KAAI,GAChBQ,GAAiBR,EAAAA,EAAAA,KAAI,GACrBS,GAAeT,EAAAA,EAAAA,KAAI,GACnBU,GAAQC,EAAAA,EAAAA,MACRC,GAAcC,EAAAA,EAAAA,KAAS,IAAMH,EAAMI,MAAMF,cACzCG,GAAQC,EAAAA,EAAAA,MACRpD,GAAOoC,EAAAA,EAAAA,IAAIe,EAAME,OAAOrD,MACxBsD,EAAqBC,UACzBX,EAAeY,OAAQ,EACvB,IAAIpD,EAAM,GACNC,EAAO,EACX,MAAMoD,EAAU,IACV,KAAEC,SAAeC,EAAAA,EAAAA,YAAwB,CAC7C3D,KAAMgD,EAAYQ,MAAMI,OACxB3D,OAAQ,GACRC,OAAQ,GACRE,IAAM,GAAEyD,mBAAmB,WAAWzD,KACtCC,KAAO,GAAEwD,mBAAmB,YAAYxD,OAE1C,GAAIqD,EAAKhC,QAAU,EACjB,IAAK,IAAIoC,EAAIJ,EAAKhC,OAAS,EAAGoC,EAAIJ,EAAKhC,OAAS,EAAGoC,IACjDL,EAAQM,QAAQ,CACdC,GAAIN,EAAKI,GAAGG,WACZC,QAASR,EAAKI,GAAGK,QAAUT,EAAKI,GAAGK,QAAUT,EAAKI,GAAGM,KACrDC,KAAMX,EAAKI,GAAGM,KACdE,QAASZ,EAAKI,GAAGS,QAAUb,EAAKI,GAAGS,QAAU,CAAC,EAC9CvD,KAAM0C,EAAKI,GAAGU,eAEhBhC,EAAcgB,MAAQC,OAGxB,IAAK,IAAIK,EAAI,EAAGA,EAAIJ,EAAKhC,OAAQoC,IAC/BL,EAAQM,QAAQ,CACdC,GAAIN,EAAKI,GAAGG,WACZC,QAASR,EAAKI,GAAGK,QAAUT,EAAKI,GAAGK,QAAU,GAC7CE,KAAMX,EAAKI,GAAGM,KACdE,QAASZ,EAAKI,GAAGS,QAAUb,EAAKI,GAAGS,QAAU,CAAC,EAC9CvD,KAAM0C,EAAKI,GAAGU,eAEhBhC,EAAcgB,MAAQC,EAG1Bb,EAAeY,OAAQ,CAAvB,EAEIiB,EAAgBlB,UACpBZ,EAAUa,OAAQ,EAClB,IAAIkB,EAAU,GACd,MAAM,KAAEhB,SAAeC,EAAAA,EAAAA,YAAwB,CAC7C3D,KAAMgD,EAAYQ,MAAMI,OACxB3D,OAAQoC,EAAWmB,MACd,GAAEK,mBAAmB,cAAcxB,EAAWmB,SAC/C,GACJtD,OAAQoC,EAASkB,MACZ,GAAEK,mBAAmB,cAAcA,mBACjC,YAAWvB,EAASkB,WAAWjB,EAAaiB,cAE/C,GACJrD,QAAU,GAAE0D,mBAAmB,eAAeA,mBAC5C,mBAEFzD,IAAM,GAAEyD,mBAAmB,WAAWzD,EAAIoD,SAC1CnD,KAAO,GAAEwD,mBAAmB,YAAYxD,EAAKmD,WAE/CkB,EAAUhB,EAAKiB,KAAKC,IAAD,CACjBZ,GAAIY,EAAKX,WACTC,QAASU,EAAKT,QAAUS,EAAKT,QAAUS,EAAKR,KAC5CC,KAAMO,EAAKR,KACXS,OAAQD,EAAKE,OAASF,EAAKE,OAAS,GACpCC,OAAQH,EAAKI,OAASJ,EAAKI,OAAS,GACpCC,OAAQL,EAAKM,OAASN,EAAKO,MAAQ,GACnCC,YAAaR,EAAKS,YAClBC,SAAUV,EAAKW,MACfC,MAAOZ,EAAKa,MACZnB,QAASM,EAAKL,QAAUK,EAAKL,QAAU,CAAC,EACxCmB,SAAUd,EAAKe,SACf3E,KAAM4D,EAAKJ,iBAEb/B,EAAamD,QAAQlB,GACrB/B,EAAUa,OAAQ,CAAlB,GAEFqC,EAAAA,EAAAA,IAAcvC,IACduC,EAAAA,EAAAA,IAAcpB,GACd,MAAMqB,EAAW,KACfjD,EAAaW,OAAQ,EACrBnD,EAAKmD,OAAS,GACduC,YAAW,KACTtB,IACA5B,EAAaW,OAAQ,CAArB,GACC,IAHH,EAgBF,OAXAwC,EAAAA,EAAAA,KAAqBC,IACnB,MAAQjG,KAAMkG,GAAYD,EAAG5C,OAC7BjD,EAAIoD,MAAQ,GACZnD,EAAKmD,MAAQ,EACbf,EAAa0D,OAAO,EAAG1D,EAAaf,QAChC1B,EAAKwD,QAAU0C,IACjBlG,EAAKwD,MAAQ0C,EACb5C,IACAmB,IACF,IAEK,CACLpE,OACAD,MACAiC,aACAC,WACAC,eACAC,gBACAC,eACAE,YACAC,iBACAC,eACAG,cACA8C,WAEH,G,UCpKH,MAAMM,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://taiwan-tour/./src/apis/activityFun.js","webpack://taiwan-tour/./src/views/ActivityFun.vue","webpack://taiwan-tour/./src/views/ActivityFun.vue?4e76"],"sourcesContent":["import { apiHelper } from \"@/utils/helpers\";\r\nexport default {\r\n  getActivity({ area, select, filter, orderby, top, skip }) {\r\n    return apiHelper.get(\r\n      `/Activity/${area}?${select}${filter}${orderby}${top}${skip}%24format=JSON`\r\n    );\r\n  },\r\n  getAllActivity({ filter, top, skip }) {\r\n    return apiHelper.get(`/Activity?${filter}${top}${skip}%24format=JSON`);\r\n  },\r\n};\r\n","<template>\r\n  <div class=\"container\">\r\n    <MainHead />\r\n    <Transition name=\"slide\">\r\n      <div v-if=\"isSlideLoading\"></div>\r\n      <SlideSpot v-else :spots=\"activitySlide\" />\r\n    </Transition>\r\n    <Transition name=\"cardList\">\r\n      <div v-if=\"isLoading\"></div>\r\n      <div v-else>\r\n        <SpotList :cardList=\"activityList\" />\r\n        <div v-if=\"activityList.length === top\" class=\"btn-section\">\r\n          <button\r\n            @click=\"showMore\"\r\n            class=\"moreBtn btn btn-primary\"\r\n            :disabled=\"isLoading\"\r\n          >\r\n            <div\r\n              v-if=\"isProcessing\"\r\n              class=\"spinner-border spinner-border-sm text-light\"\r\n              role=\"status\"\r\n            >\r\n              <span class=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n            <span v-else>更多活動</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </Transition>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MainHead from \"./../components/MainHead.vue\";\r\nimport SlideSpot from \"./../components/SlideSpot.vue\";\r\nimport SpotList from \"./../components/SpotList.vue\";\r\nimport ActivityAPI from \"./../apis/activityFun\";\r\nimport { useStore } from \"vuex\";\r\nimport { ref, reactive, computed, onBeforeMount } from \"vue\";\r\nimport { useRoute, onBeforeRouteUpdate } from \"vue-router\";\r\nexport default {\r\n  components: {\r\n    MainHead,\r\n    SlideSpot,\r\n    SpotList,\r\n  },\r\n  setup() {\r\n    const skip = ref(0);\r\n    const top = ref(12);\r\n    const selectName = ref(\"\");\r\n    const category = ref(\"\");\r\n    const categoryName = ref(\"\");\r\n    const activitySlide = ref([]);\r\n    const activityList = reactive([]);\r\n    const isLoading = ref(false);\r\n    const isSlideLoading = ref(false);\r\n    const isProcessing = ref(false);\r\n    const store = useStore();\r\n    const currentArea = computed(() => store.state.currentArea);\r\n    const route = useRoute();\r\n    const area = ref(route.params.area);\r\n    const fetchActivitySlide = async () => {\r\n      isSlideLoading.value = true;\r\n      let top = 30;\r\n      let skip = 0;\r\n      const tempObj = [];\r\n      const { data } = await ActivityAPI.getActivity({\r\n        area: currentArea.value.enName,\r\n        select: \"\",\r\n        filter: \"\",\r\n        top: `${encodeURIComponent(\"$\")}top=${top}&`,\r\n        skip: `${encodeURIComponent(\"$\")}skip=${skip}&`,\r\n      });\r\n      if (data.length >= 5) {\r\n        for (let i = data.length - 1; i > data.length - 6; i--) {\r\n          tempObj.unshift({\r\n            id: data[i].ActivityID,\r\n            address: data[i].Address ? data[i].Address : data[i].City,\r\n            city: data[i].City,\r\n            picture: data[i].Picture ? data[i].Picture : {},\r\n            name: data[i].ActivityName,\r\n          });\r\n          activitySlide.value = tempObj;\r\n        }\r\n      } else {\r\n        for (let i = 0; i < data.length; i++) {\r\n          tempObj.unshift({\r\n            id: data[i].ActivityID,\r\n            address: data[i].Address ? data[i].Address : \"\",\r\n            city: data[i].City,\r\n            picture: data[i].Picture ? data[i].Picture : {},\r\n            name: data[i].ActivityName,\r\n          });\r\n          activitySlide.value = tempObj;\r\n        }\r\n      }\r\n      isSlideLoading.value = false;\r\n    };\r\n    const fetchActivity = async () => {\r\n      isLoading.value = true;\r\n      let tempArr = [];\r\n      const { data } = await ActivityAPI.getActivity({\r\n        area: currentArea.value.enName,\r\n        select: selectName.value\r\n          ? `${encodeURIComponent(\"$\")}select=${selectName.value}&`\r\n          : \"\",\r\n        filter: category.value\r\n          ? `${encodeURIComponent(\"$\")}filter=${encodeURIComponent(\r\n              `contains(${category.value}, '${categoryName.value}')`\r\n            )}&`\r\n          : \"\",\r\n        orderby: `${encodeURIComponent(\"$\")}orderby=${encodeURIComponent(\r\n          \"EndTime desc\"\r\n        )}&`,\r\n        top: `${encodeURIComponent(\"$\")}top=${top.value}&`,\r\n        skip: `${encodeURIComponent(\"$\")}skip=${skip.value}&`,\r\n      });\r\n      tempArr = data.map((card) => ({\r\n        id: card.ActivityID,\r\n        address: card.Address ? card.Address : card.City,\r\n        city: card.City,\r\n        class1: card.Class1 ? card.Class1 : \"\",\r\n        class2: card.Class2 ? card.Class2 : \"\",\r\n        class3: card.Class3 ? card.Clas3 : \"\",\r\n        description: card.Description,\r\n        openTime: card.Cycle,\r\n        phone: card.Phone,\r\n        picture: card.Picture ? card.Picture : {},\r\n        position: card.Position,\r\n        name: card.ActivityName,\r\n      }));\r\n      activityList.push(...tempArr);\r\n      isLoading.value = false;\r\n    };\r\n    onBeforeMount(fetchActivitySlide);\r\n    onBeforeMount(fetchActivity);\r\n    const showMore = () => {\r\n      isProcessing.value = true;\r\n      skip.value += 12;\r\n      setTimeout(() => {\r\n        fetchActivity();\r\n        isProcessing.value = false;\r\n      }, 1000);\r\n    };\r\n    onBeforeRouteUpdate((to) => {\r\n      const { area: newArea } = to.params;\r\n      top.value = 12;\r\n      skip.value = 0;\r\n      activityList.splice(0, activityList.length);\r\n      if (area.value !== newArea) {\r\n        area.value = newArea;\r\n        fetchActivitySlide();\r\n        fetchActivity();\r\n      }\r\n    });\r\n    return {\r\n      skip,\r\n      top,\r\n      selectName,\r\n      category,\r\n      categoryName,\r\n      activitySlide,\r\n      activityList,\r\n      isLoading,\r\n      isSlideLoading,\r\n      isProcessing,\r\n      currentArea,\r\n      showMore,\r\n    };\r\n  },\r\n};\r\n</script>\r\n","import { render } from \"./ActivityFun.vue?vue&type=template&id=7eff68d2\"\nimport script from \"./ActivityFun.vue?vue&type=script&lang=js\"\nexport * from \"./ActivityFun.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\ac-project\\\\taiwan-tour\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["getActivity","area","select","filter","orderby","top","skip","apiHelper","getAllActivity","class","role","_createElementVNode","_hoisted_8","_createElementBlock","_createVNode","_component_MainHead","_Transition","name","$setup","_hoisted_2","_createBlock","_component_SlideSpot","spots","_hoisted_3","_hoisted_4","_component_SpotList","cardList","length","onClick","disabled","_hoisted_9","_hoisted_10","components","MainHead","SlideSpot","SpotList","setup","ref","selectName","category","categoryName","activitySlide","activityList","reactive","isLoading","isSlideLoading","isProcessing","store","useStore","currentArea","computed","state","route","useRoute","params","fetchActivitySlide","async","value","tempObj","data","ActivityAPI","enName","encodeURIComponent","i","unshift","id","ActivityID","address","Address","City","city","picture","Picture","ActivityName","fetchActivity","tempArr","map","card","class1","Class1","class2","Class2","class3","Class3","Clas3","description","Description","openTime","Cycle","phone","Phone","position","Position","push","onBeforeMount","showMore","setTimeout","onBeforeRouteUpdate","to","newArea","splice","__exports__","render"],"sourceRoot":""}